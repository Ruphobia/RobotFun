#!/usr/bin/python3.8
import os
import subprocess

def is_root():
    """Check if the script is run as root."""
    return os.geteuid() == 0

def module_loaded(module_name):
    """Check if a given module is loaded."""
    result = subprocess.run(['lsmod'], capture_output=True, text=True)
    return module_name in result.stdout

def unload_module(module_name):
    """Unload a kernel module."""
    if module_loaded(module_name):
        subprocess.run(['modprobe', '-r', module_name], check=True)
        print(f"Module {module_name} unloaded.")
    else:
        print(f"Module {module_name} is not loaded.")

def unmount_ramdisk():
    """Unmount the ramdisk."""
    ramdisk_path = '/mnt/ramdisk'  # Hard-coded ramdisk path
    result = subprocess.run(['mount'], capture_output=True, text=True)
    if ramdisk_path in result.stdout:
        # Check if the ramdisk is currently in use
        fuser_output = subprocess.run(['fuser', '-m', ramdisk_path], capture_output=True, text=True)
        if fuser_output.stdout.strip():
            print(f"Ramdisk at {ramdisk_path} is currently in use. Attempting to forcefully unmount...")
            subprocess.run(['umount', '-f', ramdisk_path], check=True)
            print(f"Ramdisk at {ramdisk_path} forcefully unmounted.")
        else:
            # Ramdisk is not in use, proceed with unmounting
            subprocess.run(['umount', ramdisk_path], check=True)
            print(f"Ramdisk at {ramdisk_path} unmounted.")
    else:
        print(f"No ramdisk found at {ramdisk_path}.")

def cleanup_exports_and_permissions(ip_address):
    """Placeholder function for cleaning up /etc/exports and /etc/hosts.allow."""
    # Implement cleaning of NFS exports and permissions as needed.
    print("Cleaning up NFS exports and permissions is not automated in this script. Please do it manually if necessary.")

def main(ip_address=''):
    if not is_root():
        print("This script must be run as root.")
        exit(1)

    unmount_ramdisk()
    
    # Unload RDMA modules if necessary. Be cautious with unloading kernel modules as it might affect other services.
    # unload_module('rpcrdma')

    cleanup_exports_and_permissions(ip_address)

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1:
        main(sys.argv[1])
    elif len(sys.argv) > 2:
        print("Usage: python cleanup_script.py [<IP address>]")
        exit(1)
    else:
        main()
