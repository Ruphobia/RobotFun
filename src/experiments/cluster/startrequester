#!/usr/bin/python3.8
import subprocess
import os
import sys
import re

# Configuration variables
STRIPEDISK = '/mnt/ramstripe'
STRIPEDEVICE = '/dev/md/md-ramstripe'
REMOTERAMDISK = '/mnt/ramdisk'
MOUNTPREFIX = '/mnt/nfs-'
REMOTELOFILE = 'lo'

def run_command(command):
    """Execute system command."""
    try:
        subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True)
    except subprocess.CalledProcessError as e:
        print(f"Command '{e.cmd}' failed with error:\n{e.output.decode()}")
        # Continue execution even if the command fails
        pass

def is_root():
    """Check if the script is run as root."""
    return os.geteuid() == 0

def validate_ip(ip_address):
    """Validate IP address format."""
    pattern = re.compile(r'^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$')
    return pattern.match(ip_address) is not None

def setup_raid_array(ip_addresses):
    """Setup RAID array using NFS-mounted RAM disks from remote nodes."""
    if not is_root():
        print("This script must be run as root")
        sys.exit(1)
    
    # Unmount stripedisk if mounted
    if os.path.ismount(STRIPEDISK):
        run_command(f"umount {STRIPEDISK}")
    
    # Stop and disassemble existing RAID array if exists
    run_command(f"mdadm --stop {STRIPEDEVICE}")
    run_command("losetup -d /dev/loop*")
    run_command(f"umount -f {MOUNTPREFIX}*")

    # Load nfs-rdma client kernel module
    run_command("modprobe xprtrdma")

    loopdevices = []
    for ip in ip_addresses:
        if not validate_ip(ip):
            print(f"Invalid IP address: {ip}")
            continue
        
        mountdir = f"{MOUNTPREFIX}{ip}"
        os.makedirs(mountdir, exist_ok=True)
        run_command(["mount", "-o", "rdma,port=2050,nolock,vers=3", f"{ip}:{REMOTERAMDISK}", mountdir])
        
        # Find the next available loop device
        loopdevice = subprocess.check_output(["losetup", "-f"]).decode().strip()
        run_command(["losetup", loopdevice, f"{mountdir}/{REMOTELOFILE}"])
        loopdevices.append(loopdevice)

    if not loopdevices:
        print("No loop devices were set up.")
        sys.exit(1)
    
    # Create RAID0 array
    os.makedirs(STRIPEDISK, exist_ok=True)
    run_command([ "mdadm", "--create", STIPEDEVICE, "--run", "--chunk=2048", "--level=0", f"--raid-devices={len(loopdevices)}"] + loopdevices)
    run_command(["mkfs.ext4", STRIPEDEVICE])
    run_command(["mount", "-o", "data=writeback,noatime,nodiratime,barrier=0,noacl,nobh,noquota", STRIPEDEVICE, STRIPEDISK])

    # Verify setup
    if os.path.ismount(STRIPEDISK):
        print(f"RAID array at {STRIPEDISK} set up successfully.")
    else:
        print("Failed to set up RAID array.")
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python3 setup_raid.py <IP1> <IP2> ...")
        sys.exit(1)
    setup_raid_array(sys.argv[1:])
